#!/bin/bash

echo "=============================================================="
echo " SCRIPT INTERATIVO PARA BASE RECALIBRATION (GATK)"
echo "=============================================================="
echo ""
echo "Este script realiza a recalibração de qualidade de bases (BQSR)"
echo "usando as ferramentas do GATK: BaseRecalibrator e ApplyBQSR."
echo ""
echo "OBJETIVO: melhorar a acurácia da chamada de variantes, corrigindo"
echo "viés sistemático de erro na qualidade de base em arquivos BAM."
echo ""
echo "FERRAMENTAS USADAS:"
echo "- GATK (via Docker: broadinstitute/gatk)"
echo "- BaseRecalibrator e ApplyBQSR"
echo ""
echo "ENTRADAS NECESSÁRIAS:"
echo "- Genoma de referência .fa (com .fai e .dict na mesma pasta)"
echo "- VCFs de variantes conhecidas (.vcf.gz) COM seus .tbi"
echo "  Você precisará EXATAMENTE dos seguintes pares (na ORDEM):"
echo "   1) dbSNP138 (.vcf.gz e .tbi)"
echo "   2) Mills_and_1000G (.vcf.gz e .tbi)"
echo "   3) 1000G_phase1 (.vcf.gz e .tbi)"
echo "   4) known_indels (.vcf.gz e .tbi)"
echo ""
echo "Você pode obter os arquivos recomendados para hg38 em:"
echo "https://console.cloud.google.com/storage/browser/genomics-public-data/resources/broad/hg38/v0"
echo ""
echo "Podemos continuar? (yes/no)"
read START_CONFIRM
[[ "$START_CONFIRM" != "yes" ]] && echo "Script cancelado." && exit 0

# === Genoma de referência ===
echo ""
echo "Digite o caminho COMPLETO da pasta onde está o arquivo .fa do genoma:"
read GENOME_DIR
[[ ! -d "$GENOME_DIR" ]] && echo "Diretório não encontrado." && exit 1
echo "Arquivos encontrados em $GENOME_DIR:"
ls "$GENOME_DIR"
echo ""
echo "Digite o NOME exato do arquivo .fa de referência (ex: hg38.fa):"
read GENOME_FA
GENOME="$GENOME_DIR/$GENOME_FA"

if [[ ! -f "$GENOME" || ! -f "$GENOME_DIR/${GENOME_FA}.fai" || ! -f "$GENOME_DIR/${GENOME_FA%.fa}.dict" ]]; then
  echo "Erro: .fa, .fai e .dict devem estar todos na mesma pasta com nomes consistentes."
  exit 1
fi

# === VCFs ===
echo ""
echo "Digite o caminho COMPLETO da pasta com os arquivos VCF (.vcf.gz + .tbi):"
read VCF_DIR
[[ ! -d "$VCF_DIR" ]] && echo "Diretório não encontrado." && exit 1
echo "Arquivos encontrados em $VCF_DIR:"
ls "$VCF_DIR"

echo ""
echo "Agora digite os NOMES dos arquivos .vcf.gz E seus .tbi, nesta ORDEM:"
echo "  1) dbSNP138.vcf.gz dbSNP138.vcf.gz.tbi"
echo "  2) Mills.vcf.gz Mills.vcf.gz.tbi"
echo "  3) 1000G.vcf.gz 1000G.vcf.gz.tbi"
echo "  4) known_indels.vcf.gz known_indels.vcf.gz.tbi"
echo ""
echo "Separados por espaço (total de 8 arquivos):"
read -a VCF_FILES

if [[ "${#VCF_FILES[@]}" -ne 8 ]]; then
  echo "Erro: você deve fornecer exatamente 8 arquivos (.vcf.gz e .tbi correspondentes)."
  exit 1
fi

# === BAMs ===
echo ""
echo "Digite o caminho COMPLETO da pasta onde estão os arquivos .bam:"
read BAM_DIR
[[ ! -d "$BAM_DIR" ]] && echo "Diretório não encontrado." && exit 1
echo "Arquivos encontrados em $BAM_DIR:"
ls "$BAM_DIR"

echo ""
echo "Digite os NOMES dos arquivos .bam (já com RG e duplicatas marcadas), separados por espaço:"
read -a BAM_FILES
[[ "${#BAM_FILES[@]}" -eq 0 ]] && echo "Erro: nenhum BAM fornecido." && exit 1

# === UID ===
echo ""
echo "Informe o UID para rodar no Docker (ex: 1006), ou 'no' para rodar como root:"
read UID_INPUT
USE_USER=""
[[ "$UID_INPUT" =~ ^[0-9]+$ ]] && USE_USER="--user $UID_INPUT"

# === Threads e memória ===
TOTAL_THREADS=$(nproc)
echo "Seu sistema possui $TOTAL_THREADS threads disponíveis."
echo "Quantas threads deseja utilizar? (recomendado: $((TOTAL_THREADS - 2))):"
read THREADS

TOTAL_RAM=$(free -g | awk '/Mem:/ {print $2}')
echo "Memória disponível: ${TOTAL_RAM} GB. Quanto deseja usar? (ex: $((TOTAL_RAM - 2))):"
read RAM

# === Criar saída ===
TIMESTAMP=$(date +"%d-%m-%Y_%Hh%Mm")
OUTPUT_DIR="$BAM_DIR/7-BaseRecalibrator_ApplyBQSR_$TIMESTAMP"
mkdir -p "$OUTPUT_DIR/tmp_bqsr"

# === Recapitulação ===
echo ""
echo "================ RECAPITULAÇÃO ================"
echo "Genoma de referência: $GENOME"
echo "VCFs de variantes conhecidas:"
for f in "${VCF_FILES[@]}"; do echo "- $f"; done
echo "Diretório dos BAMs: $BAM_DIR"
echo "Arquivos BAM:"
for f in "${BAM_FILES[@]}"; do echo "- $f"; done
echo "Usuário Docker: ${UID_INPUT:-root}"
echo "Threads: $THREADS"
echo "Memória: ${RAM}GB"
echo "Saída: $OUTPUT_DIR"
echo "================================================"
echo "Confirmar execução? (yes/no)"
read FINAL_CONFIRM
[[ "$FINAL_CONFIRM" != "yes" ]] && echo "Execução cancelada." && exit 0

# === Execução ===
SCRIPT_START=$(date +%s)
for BAM in "${BAM_FILES[@]}"; do
  SAMPLE=$(basename "$BAM" .bam)
  echo ""
  echo "Iniciando BQSR para: $SAMPLE"

  docker run --rm $USE_USER \
    -v "$GENOME_DIR":/genome \
    -v "$VCF_DIR":/vcfs \
    -v "$BAM_DIR":/bam \
    -v "$OUTPUT_DIR":/output \
    broadinstitute/gatk \
    bash -c "
      mkdir -p /output/tmp_bqsr

      gatk BaseRecalibrator \
        -R /genome/$GENOME_FA \
        -I /bam/$BAM \
        --known-sites /vcfs/${VCF_FILES[0]} \
        --known-sites /vcfs/${VCF_FILES[2]} \
        --known-sites /vcfs/${VCF_FILES[4]} \
        --known-sites /vcfs/${VCF_FILES[6]} \
        -O /output/${SAMPLE}_recal_data.table \
        --verbosity INFO \
        --tmp-dir /output/tmp_bqsr

      gatk ApplyBQSR \
        -R /genome/$GENOME_FA \
        -I /bam/$BAM \
        --bqsr-recal-file /output/${SAMPLE}_recal_data.table \
        -O /output/${SAMPLE}_recalibrated.bam \
        --verbosity INFO \
        --tmp-dir /output/tmp_bqsr
    " &> "$OUTPUT_DIR/${SAMPLE}_bqsr.log"

  echo "Concluído para $SAMPLE. Log: $OUTPUT_DIR/${SAMPLE}_bqsr.log"
done

SCRIPT_END=$(date +%s)
DURATION=$((SCRIPT_END - SCRIPT_START))
echo ""
echo "=============================================================="
echo "BQSR finalizado com sucesso!"
echo "Saída disponível em: $OUTPUT_DIR"
echo "Tempo total: $((DURATION / 3600))h $((DURATION % 3600 / 60))m $((DURATION % 60))s"
echo "=============================================================="
